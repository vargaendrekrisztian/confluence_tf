resource "aws_ecr_repository" "ecr" {
  name                 = var.ecr_repo_name
  image_tag_mutability = var.ecr_image_tag_mutability

  tags = {
    Name = join("-", [
      var.tag_prefix,
      var.ecr_repo_name
    ])
  }
}

resource "aws_ecr_repository_policy" "ecr_repo_policy" {
  repository = aws_ecr_repository.ecr.name
  policy = jsonencode(
    {
      Version = "2012-10-17"
      Statement = [{
        Sid       = "AllowPushPull"
        Effect    = "Allow"
        Principal = "*"
        Action = [
          "ecr:BatchGetImage",
          "ecr:BatchCheckLayerAvailability",
          "ecr:CompleteLayerUpload",
          "ecr:GetDownloadUrlForLayer",
          "ecr:InitiateLayerUpload",
          "ecr:PutImage",
          "ecr:UploadLayerPart"
        ]
      }]
    }
  )
}

locals {
  docker_image_ref = join(":", [var.docker_image_name, var.docker_image_tag])
  docker_tagged_image_name = join(":", [
    aws_ecr_repository.ecr.repository_url,
    var.docker_image_tag
  ])
}

resource "null_resource" "docker" {
  triggers = {
    ecr_repo_url = aws_ecr_repository.ecr.repository_url
  }

  provisioner "local-exec" {
    command = "sudo docker pull %{if var.docker_image_tag != ""}${local.docker_image_ref}%{else}${var.docker_image_name}%{endif}"
  }
  provisioner "local-exec" {
    command = "sudo docker tag %{if var.docker_image_tag != ""}${local.docker_image_ref}%{else}${var.docker_image_name}%{endif} ${local.docker_tagged_image_name}"
  }
  provisioner "local-exec" {
    command = "sudo aws ecr get-login-password | sudo docker login --username AWS --password-stdin ${var.aws_account_id}.dkr.ecr.${var.region}.amazonaws.com"
  }
  provisioner "local-exec" {
    command = "sudo docker push ${local.docker_tagged_image_name}"
  }
}
